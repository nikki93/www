<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nikhilesh.info</title><link href="http://www.nikhilesh.info/" rel="alternate"></link><link href="http://www.nikhilesh.info/feeds/all.atom.xml" rel="self"></link><id>http://www.nikhilesh.info/</id><updated>2015-09-17T00:00:00-04:00</updated><entry><title>life update: art, proto{cols',',types}</title><link href="http://www.nikhilesh.info/life-update.html" rel="alternate"></link><updated>2015-09-17T00:00:00-04:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2015-09-17:life-update.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/pgame.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/pgame.png"
        alt="lgame with old sprites, pgame with... no sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yup, it's happening again. Now it's &lt;a href="https://github.com/nikki93/pgame"&gt;pgame&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;(Philosophy) Game development tools... Why games? Why development tools?&lt;/h2&gt;
&lt;p&gt;So the past year has been quite inspiring in philosophical terms. I realized that my trajectory so far is I started playing games, then found making games more fun, then I realized making game-development tools is more fun. :) Starting with Game Maker then going through object models, serialization and stuff like that, I've found a few things to be important (some of these correspond to the principles outlined in the &lt;a href="http://www.nikhilesh.info/files/cgame.pdf"&gt;cgame paper&lt;/a&gt; or the &lt;a href="http://www.nikhilesh.info/files/cgame-poster.pdf"&gt;poster&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;save/load:&lt;/strong&gt; Users often want to save/load games at any point, and your game shouldn't need too much to implement this. But not just that, a good way to build a level is to serialize the live level. So many other things are nice with serialization (see the cgame paper for more). We want it to be automatic for all objects, and in fact the manual specification should be for exceptions to the rule. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live property editing:&lt;/strong&gt; Allows quicker debugging and experimentation with ideas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live functionality editing:&lt;/strong&gt; Editing 'code.' For same reason as live property editing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a principle of abstraction that supports the above&lt;/strong&gt; The above points should extend not just to built-in elements, but to &lt;em&gt;anything&lt;/em&gt; the user can come up with and make using your tool. Ever. Any new logic the user writes, any new data types, and in a way that applies to the problem at hand--for example, some numbers are better specified in the editor visually, like a direction to face (check out Pharo's inspectors).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last one is the tough one. For cgame, the principle was "use an entity-system," detailed in the poster and paper.&lt;/p&gt;
&lt;p&gt;Over time I've seen different ideas. C++/Java with class-style object orientation where classes are conflated with static types. More proper static typing a la Haskell but also functional things and the confluence of the two into monads (traditional Haskell IO) or streams (like Elm) (arguable one reducible to the other but reducability isn't sufficient). With functional I realized that this is one reason games are interesting: they are highly "current state" and "event based." You react to input events from the player, but even without such input things go crazy with AI enemies fighting each other or such. Implementing a compiler means implementing a function of type &lt;code&gt;SourceodeA -&amp;gt; Either Error SourcecodeB&lt;/code&gt;--a compiler is a transformation, and 'functional' is nice for writing those. What function is the game? Sorta hard. 'Functional relational programming' is a nice thing to check out here, where the model in a functional reactive model becomes a relational database, ensuring same-time constraints along with across-time constarints, using a mix of declarative/logic/SQLy and functional stuff. More resources on this: &lt;a href="http://shaffner.us/cs/papers/tarpit.pdf"&gt;one&lt;/a&gt;, &lt;a href="http://incidentalcomplexity.com/"&gt;two&lt;/a&gt;, &lt;a href="http://unisonweb.org/"&gt;three&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another reason games are interesting is that we are trying to build an aesthetic end product. It's not judged simply by "it's 80% faster" but "hey so I played this thing and I guess it's kinda sorta fun but like it depends on taste." So you want that immediate artist-artwork feedback loop you have when painting on an easel without a blindfold on or playing drums without earplugs in. Let's make games with the blindfold off.&lt;/p&gt;
&lt;p&gt;Getting a little abstract there. But yeah that connects, I think, with the live coding point. I'd go as far as saying static typing is actually a hindrance to such right-brained activity. I'd rather work on the game proceed in cycles of right-brained 'creativity' (live coding with everything late-bound) followed by more left-brained 'crystallization' (most testing / solidifying activity, with static types helping here). Much like the cycle of paradigms in Kuhn's &lt;a href="https://en.wikipedia.org/wiki/The_Structure_of_Scientific_Revolutions"&gt;&lt;em&gt;The Structure of Scientific Revolutions&lt;/em&gt;&lt;/a&gt;, and the right-brained crystallization periods along the lines of the 'metaphors' in Bohm and Peat's &lt;a href="http://www.amazon.com/Science-Order-Creativity-Dramatic-Creative/dp/0553344498"&gt;&lt;em&gt;Science, Order, and Creativity&lt;/em&gt;&lt;/a&gt;, except applied to a much localized and quicker process in the game creator(s) mind(s) rather than generations of scientists. I went pretty far down this rabbit hole, other reads including Nietzsche's works (esp. &lt;em&gt;The Gay Science&lt;/em&gt;, &lt;em&gt;Beyond Good and Evil&lt;/em&gt;). To live code with ultimate freedom you need to be able to change a thing's type.&lt;/p&gt;
&lt;p&gt;&lt;img alt="man I love this picture" src="http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/Images/Tool2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(picture from Bret Victor's &lt;a href="http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/"&gt;&lt;em&gt;A Brief Rant on The Future of Interaction Design&lt;/em&gt;&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You need a system with a good "part that fits the problem" but also a good "part that fits the human" (inspired by Bret Victor's &lt;a href="http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/"&gt;&lt;em&gt;A Brief Rant on The Future of Interaction Design&lt;/em&gt;&lt;/a&gt;). To this end, it must be informed not just by theory, but also by human psychology. Math is good if the theories are solid and proved, but even better if the proofs are elgant and simple in a way that lends itself to use by humans for building more math or whatever else. So I have tried to draw inspiration from everyone and how they work, especially how they work on tasks that demand aestheticism.&lt;/p&gt;
&lt;p&gt;Again, bringing us back to the aestheticism surrounding games. Aeshetic end-points requiring creative work, testing our purpose of &lt;a href="http://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html"&gt;providing computer support for the creative spirit in everyone&lt;/a&gt;--that's a good paper on the design of Smalltalk you should check out. It says, "If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual." and I'd go far as saying that "it must be entirely created by a single individual" :) In all seriousness though, if it takes too long to make and too many people, it's probably too complicated. The system should be so good that as it is being built it helps itself be built. Like how morphs in Self exploit the prototype inheritance, and how cgame's editor GUI is itself built using the entity-system model.&lt;/p&gt;
&lt;p&gt;Making development tools is also nice in that you're not just 'building a service' that people want to not think about and use and forget (like a search engine that answers the question and gets out of your way), but something that they are engaged in conversation with and work with together, like Ableton Live is to the music-maker or Photoshop for the artist. If you're a lumberjack, it's your axe that you so admire, not your kitchen tap you never thought twice about. It isn't quite as taken for granted. And if it is a development tool for developers, the 'end-user' can actually code and release libraries, even bugfixes for your own tool, allowing for community aspects like the one surrounding the Ogre forums.&lt;/p&gt;
&lt;p&gt;This brings us to yet another point, which is education. Would you rather tell a kid, "Hey, I'm gonna teach you what a for loop is, we're gonna print 10 numbers!" or  "Hey, I'm gonna teach you what a for loop is, we're gonna make 10 space invaders enemies appear on screen!" What's more, kids are less informed (more like 'limited by') socialization into a current status quo for what makes a good game or a good piece of art, and would make some really cool things that I wanna see.&lt;/p&gt;
&lt;p&gt;Lastly, I've been doing games for a while and have an accumulation of ideas in my head regarding what makes them annoying, and every decision I make sort of gives me flashbacks of past issues and a gut feeling about whether it's gonna help that issue.&lt;/p&gt;
&lt;p&gt;Oh and, did I mention that... Games are just fun anyways? You might already know this.&lt;/p&gt;
&lt;p&gt;Yeah, I wanna make game development tools.&lt;/p&gt;
&lt;h2&gt;(Idea) Prototype-based programming&lt;/h2&gt;
&lt;p&gt;This is "a principle of abstraction that supports the above." The idea is: &lt;em&gt;make abstractions concrete enough&lt;/em&gt; that they can be save/loaded and live edited.&lt;/p&gt;
&lt;p&gt;See how that makes the principle 'support the above'? In the spirit of concreteness, what I mean is: things that we think of as 'classes' and 'types' (which are abstractions) should be actual tangible entities, that you can edit and play around with, the &lt;em&gt;very same&lt;/em&gt; way you would play with 'instances' of those classes and types (their 'concretizations'). Tangible like for a sculptor with hands-on control of their art piece.&lt;/p&gt;
&lt;p&gt;If we do this to the extent that an abstraction of an instance is literally the same 'kind of thing' as an instance (they are both now called 'entities'), then we should get this for free. They are &lt;a href="https://en.wikipedia.org/wiki/Brahman"&gt;made of the same stuff&lt;/a&gt;. The abstraction is also now clay in the sculptor's hands.&lt;/p&gt;
&lt;p&gt;Enter prototype-based programming.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Gilad Bracha goes far as to apply the abstract-to-concrete approach to &lt;a href="http://gbracha.blogspot.ca/2012/11/debug-mode-is-only-mode.html"&gt;'functions' vs. 'running instances of functions'&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(stay tuned for a more in-depth idea description)&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>lgame: cgame in lisp?</title><link href="http://www.nikhilesh.info/lgame.html" rel="alternate"></link><updated>2015-01-03T00:00:00-05:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2015-01-03:lgame.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/lgame.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/lgame.png"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yup, it's happening. I've begun learning lisp (Common Lisp in
particular) and am really liking it. It seems perfect for the
live-coding goal of cgame-like tools. Macros, the REPL, SLIME -- it's
all so much fun!&lt;/p&gt;
&lt;p&gt;cgame reborn in lisp a year later? Stay tuned...&lt;/p&gt;</summary></entry><entry><title>Photon mapping ray tracer</title><link href="http://www.nikhilesh.info/photon-mapper.html" rel="alternate"></link><updated>2014-11-17T00:00:00-05:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2014-11-17:photon-mapper.html</id><summary type="html">&lt;p&gt;We were required to write a &lt;a href="http://en.wikipedia.org/wiki/Photon_mapping"&gt;photon
mapping&lt;/a&gt; ray tracer for a
class I'm taking this semester, &lt;a href="http://www.cs.princeton.edu/courses/archive/fall14/cos526/"&gt;Advanced Computer
Graphics&lt;/a&gt;. Here's
a picture my photon mapper generated:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/render-cornell-final.jpg"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/render-cornell-final.jpg"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A visualization of some photons traced:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/scattering-cornell.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/scattering-cornell.png"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some photons stored at surfaces:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/mmap-cornell-both.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/mmap-cornell-both.png"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just the indirect lighting:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/render-cornell-indirect.jpg"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/render-cornell-indirect.jpg"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some other renders:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/render-softshadow-final.jpg"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/render-softshadow-final.jpg"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/render-caustic-final.jpg"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/render-caustic-final.jpg"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Reminisce: my Ludum Dare 30 entry made with cgame</title><link href="http://www.nikhilesh.info/cgame-ld30.html" rel="alternate"></link><updated>2014-08-26T00:00:00-04:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2014-08-26:cgame-ld30.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/cgame-ld30.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/cgame-ld30.png" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://dl.dropboxusercontent.com/u/535792/ld30/ld30-reminisce-mac.zip"&gt;OS/X&lt;/a&gt; | &lt;a href="https://dl.dropboxusercontent.com/u/535792/ld30/ld30-reminisce-win.zip"&gt;Windows&lt;/a&gt; | &lt;a href="http://www.ludumdare.com/compo/ludum-dare-30/?action=preview&amp;amp;uid=39848"&gt;LD30&lt;/a&gt; | &lt;a href="https://github.com/nikki93/cgame/tree/ld30"&gt;Source&lt;/a&gt; | &lt;a href="https://www.youtube.com/watch?v=pZJOkldUVPA"&gt;Timelapse&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a while I've wanted to enter in a Ludum Dare with cgame. It'd be a
great way to see if it actually worked for rapid game development. And
Ludum Dare needs rapid -- code, art and music in 48 hours! Few weeks
ago I thought cgame was finally at the point that I could use it for
one. So I did Ludum Dare 30 this past weekend.&lt;/p&gt;
&lt;p&gt;Development went alright -- better than I expected, but not quite the
best. I wanted to make some music and more levels, and was running out
of time. Eventually I hit a point where I thought, "Hey, I think I
can make it end here and have it make sense." So I just stopped
there, cleaned up a bit, and it seemed to work out!&lt;/p&gt;
&lt;p&gt;Also while working on this I added some little cgame features and
fixes. It's also given me some things to think about to fix/add in
cgame. In all, a great experience. I learned a lot about games, about
making them, good talks with the community on IRC.&lt;/p&gt;
&lt;p&gt;I think one of cgame's top priorities next is documentation. I'll make
some tutorials and stuff hopefully soon. Till then, play my Ludum Dare
30 game and leave comments! :)&lt;/p&gt;</summary></entry><entry><title>cgame: 11-line optimization</title><link href="http://www.nikhilesh.info/cgame-optimization.html" rel="alternate"></link><updated>2014-07-22T00:00:00-04:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2014-07-22:cgame-optimization.html</id><summary type="html">&lt;p&gt;I've continued to work on cgame since the independent work
deadline. Most interesting updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Backwards-compatible save for C systems:&lt;/strong&gt; This is more of an
  internal thing, but basically this means changing the format of C
  save/load data (by, for example, adding or removing properties) will
  not make old save files unusable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Animation system:&lt;/strong&gt;
  &lt;a href="https://www.youtube.com/watch?v=4LV8jJMeuRA"&gt;Here&lt;/a&gt;'s a video if it
  in use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The focus of this blog post, however, is on a &lt;a href="https://github.com/nikki93/cgame/commit/d2e0d17e344c02443c6139e0787490e1c2cf24d9"&gt;small change&lt;/a&gt;
I made to the code that brought a big performance bonus. C functions
of the form &lt;code&gt;x_y&lt;/code&gt; are available as &lt;code&gt;cs.x.y&lt;/code&gt; in Lua. This allows
writing &lt;code&gt;cs.transform.rotate(...)&lt;/code&gt; for &lt;code&gt;transform_rotate(...)&lt;/code&gt;, which
is the same as if transform was actually a Lua system. So Lua scripts
see a consistent API for both Lua and C systems. This was made
possible by the following Lua code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;systems_mt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;__index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rawget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;mt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;__index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;setmetatable&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;setmetatable&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="n"&gt;systems_mt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systems&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the metatable of &lt;code&gt;cs&lt;/code&gt; makes it so that accessing a non-existent
member gives a table that concatenates the keys and returns the C
symbol. While reviewing the code today I realized this internal table
was being re-created every access, so I added some memoization:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;system_binds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;systems_mt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;__index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rawget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;system_binds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;setmetatable&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;__index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="n"&gt;system_binds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;setmetatable&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="n"&gt;systems_mt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systems&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results? Here's a screenshot of the FPS counter when running
&lt;code&gt;test_huge.lua&lt;/code&gt; with 2000 blocks before the change:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/cgame-optimization-before.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/cgame-optimization-before.png"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here it is after:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/cgame-optimization-after.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/cgame-optimization-after.png"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yup, it actually maxed out the FPS (which is capped at about 60).&lt;/p&gt;</summary></entry><entry><title>cgame progress: physics, gui, in-game editor, paper, poster</title><link href="http://www.nikhilesh.info/cgame-progress.html" rel="alternate"></link><updated>2014-05-09T00:00:00-04:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2014-05-09:cgame-progress.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nikki93/cgame"&gt;source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nikhilesh.info/files/cgame.pdf"&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nikhilesh.info/files/cgame-poster.pdf"&gt;poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's been a while since I &lt;a href="http://www.nikhilesh.info/cgame.html"&gt;last posted about
cgame&lt;/a&gt;. I've since turned cgame into my
independent work project for college, and made a lot of progress on
it. It now has a bunch of new features including physics, GUI and an
in-game editor. You can change properties and re-write scripts with
real-time feedback while the game is running. Here's a picture:
&lt;a href="http://www.nikhilesh.info/images/cgame-progress.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/cgame-progress.png" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here's a video of me making a space shooter prototype with it in an hour:
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/Lb1NWyUqAfA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;For more information about the philosophy behind it you can check out
the &lt;a href="http://www.nikhilesh.info/files/cgame.pdf"&gt;paper&lt;/a&gt; I wrote on it (we have to
write one for independent work projects). I also made a
&lt;a href="http://www.nikhilesh.info/files/cgame-poster.pdf"&gt;poster&lt;/a&gt; for a poster presentation
session we had.&lt;/p&gt;
&lt;p&gt;Also, the source code is available on GitHub &lt;a href="https://github.com/nikki93/cgame"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>cgame: C entity-component-system, 2d sprites, Lua scripting, save/load</title><link href="http://www.nikhilesh.info/cgame.html" rel="alternate"></link><updated>2014-01-01T00:00:00-05:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2014-01-01:cgame.html</id><summary type="html">&lt;p&gt;My &lt;a href="http://www.nikhilesh.info/sprites.html"&gt;last blog post&lt;/a&gt; was about sprites in modern
OpenGL. I realised that the whole 'sprites are POD structs contiguous in
memory' idea lent itself to an entity-component-system model -- you just
store all the sprites for every entity in this huge array. Transform, physics
object and whatever other component works this way too. The game data is just a
bunch of tables and an 'entity' is just a primary key like in a relational
database.&lt;/p&gt;
&lt;p&gt;So I decided to try it out. Started with the sprite and transform components,
then added save/load and also Lua scripting.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nikhilesh.info/images/cgame.png"&gt;
    &lt;img class="screenshot" src="http://www.nikhilesh.info/images/cgame.png"
        alt="I really need some new sprites" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the picture above you see a test run with 30,000 entities each in
'oscillator' and 'rotator' Lua systems that move them around. My Macbook Air
can handle the above at 40fps. You can see the Lua script that makes the blocks
in the bottom-left of the screen.&lt;/p&gt;
&lt;p&gt;The code's on github &lt;a href="https://github.com/nikki93/cgame"&gt;here&lt;/a&gt;. I've tested it
on Windows and Mac OS X. Needs OpenGL 3.2 to work.&lt;/p&gt;
&lt;p&gt;Save/load was easy to implement because each system just
serializes/deserializes its own table. So the save/load isn't entity-centric,
it's system-centric -- you don't iterate through entites and save each one,
instead you just save the various tables and it all works out because of
the primary key consistency.&lt;/p&gt;
&lt;p&gt;The whole engine is exposed to Lua script. Making the player entity you see in
the middle of the window was as simple as,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entity_new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;-- put it in the &amp;#39;transform&amp;#39; system so it can move, rotate&lt;/span&gt;
&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform_set_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform_set_scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;-- twice as big&lt;/span&gt;

&lt;span class="c1"&gt;-- put it in the &amp;#39;sprite&amp;#39; system so you can see it!&lt;/span&gt;
&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sprite_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sprite_set_cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sprite_set_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;32.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's fun about the systems idea is if you wanted to control it by keyboard
you just add,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyboard_controlled_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But if you wanted to control the camera by keyboard instead, just replace
'player' with the camera entity in the above line. Cameras work through systems
too -- just put anything that also has a transform in the 'camera' system and
the game is rendered from that viewpoint with rotation and scale (scale is
zoom). Not just add entities you can create systems in Lua too. Here's
the code for the rotator system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;   &lt;span class="c1"&gt;-- tbl[ent] contains data for ent -- right now just speed&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;rotator_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;math.pi&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;rotator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;update_all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="n"&gt;cgame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform_rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Lua script system uses LuaJIT. This makes it pretty easy to bind C
functions to Lua through the &lt;a href="http://luajit.org/ext_ffi.html"&gt;FFI library&lt;/a&gt;. All
symbols exported from the executable are available from LuaJIT, you just have
to give it the C prototype. MSVC doesn't export symbols by default so you need
__declspec(dllexport) there. cgame's script.{h,c} does some magic that makes
this really easy -- you just need to surround your declarations in C with
'SCRIPT(modulename, ...)' and add an 'EXPORT' in front of functions. Here's
some examples from vec2.h and transform.h:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SCRIPT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Vec2&lt;/span&gt; &lt;span class="n"&gt;Vec2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Vec2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="n"&gt;Vec2&lt;/span&gt; &lt;span class="nf"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="n"&gt;Vec2&lt;/span&gt; &lt;span class="nf"&gt;vec2_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vec2&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vec2&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;

      &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SCRIPT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;transform_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;transform_remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;

      &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This also acts as a normal C declaration when #included into other files, which
means there is no duplication. The actual declarations look like the above and
the cgame module in Lua is always up-to-date. You can continue adding C
functions normally and they'll be visible from Lua. The FFI library also allows
wrapping C structs. This allows, for example, the '+' operator for Vec2 in Lua
(binds to 'vec2_add(...)') or any other extensions that are easier to write in
script.&lt;/p&gt;</summary></entry><entry><title>Modern OpenGL and many, many sprites</title><link href="http://www.nikhilesh.info/sprites.html" rel="alternate"></link><updated>2013-12-20T00:00:00-05:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2013-12-20:sprites.html</id><summary type="html">&lt;p&gt;UPDATE: I just put the code for the experiment below on
&lt;a href="https://github.com/nikki93/opengl"&gt;here&lt;/a&gt;. Needs SDL2, FreeImage, OpenGL to
work, and it's in C++11 so you'll need that too. The real experiment code is in
the 'Test' class in main.cpp, other stuff is boilerplate.&lt;/p&gt;
&lt;p&gt;I gave in to the 'my OpenGL knowledge is old' (no more glBegin()/glEnd())
problem and decided to try things with the new vertex buffer objects. After
learning a bit about it, I realised it made so much sense for lots-of-sprites
rendering. I looked around a bit and it seemed to be a standard technique --
it's just instancing. This is especially great if all of your sprite data is
stored as POD structs contiguous in memory because then you can just dump it
all into the GPU. So after reading a few of them nifty 'modern OpenGL'
tutorials, I coded up a little demo to see how it performed.&lt;/p&gt;
&lt;p&gt;&lt;img class="screenshot" src="http://www.nikhilesh.info/images/sprites.png"
    alt="are those cookies?" /&gt;&lt;/p&gt;
&lt;p&gt;Here you see 100,000 sprites up on screen moving around in a random fashion.
Renders at around 30fps on my little Macbook Air. Modern OpenGL is really neat
-- you just throw a bunch of data at the GPU very quickly and then make it do
what you want it to do without having to conform to a weird API of setting 'pen
color' before you 'draw a circle' or such. The GPU is all yours.&lt;/p&gt;
&lt;p&gt;So in the above example I just have a quad mesh that's instanced a lot. Each
instance has different position and texture coordinates. The sprites are all in
an atlas texture which allows them all to be rendered with no state changes
by just varying the texcoords. I draw all the sprites with a single OpenGL draw
call (the '6' is because each quad has two triangles):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;glDrawElementsInstanced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_TRIANGLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_UNSIGNED_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_sprites&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The vertex shader operates on each vertex of the quad for each instance. Here's
what it looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#version 150&lt;/span&gt;

&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;texcoord_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// texcoord&lt;/span&gt;
    &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;texcoord_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// world vertex position&lt;/span&gt;
    &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;worldPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worldPos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1066666667&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The 'vertex' attribute varies per actual vertex, while the rest vary only per
instance. So the shader reads in slightly higher-level information (where it
        is, etc.) about the sprite and figures it out, there's no need to do
too much on the CPU with glPushTransform()/glTranslate() or such. The
corresponding fragment shader is the standard texture-sampling one.&lt;/p&gt;
&lt;p&gt;The key part of the code is where I bind the various arrays to their buffer objects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// get attribute locations&lt;/span&gt;
&lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;vertAttrib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glGetAttribLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vertex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;posAttrib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glGetAttribLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;position&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;cellAttrib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glGetAttribLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;sizeAttrib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glGetAttribLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="c1"&gt;// make vbo, bind vbo attributes&lt;/span&gt;
&lt;span class="n"&gt;glGenBuffers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glBindBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;bufferData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quadVertices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_STATIC_DRAW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertAttrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertAttrib&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// make ibo, bind ibo attributes&lt;/span&gt;
&lt;span class="n"&gt;glGenBuffers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glBindBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;bufferData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sprites&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_DYNAMIC_DRAW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posAttrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posAttrib&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glVertexAttribDivisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posAttrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellAttrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="n"&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellAttrib&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glVertexAttribDivisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellAttrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeAttrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="n"&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeAttrib&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;glVertexAttribDivisor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeAttrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;'vbo' here is for the quad (source for just the vertex attribute) while 'ibo'
varies across sprites (position, cell and size). I should probably come up with
better names for these...&lt;/p&gt;
&lt;p&gt;In either case, I thought that was pretty cool and I feel like it might be fun
to try and build a nice sprite library around it. And then an animation thing
(just varying texcoords, right?). Then physics, networking, sound... A
scripting layer on top.&lt;/p&gt;
&lt;p&gt;NIH, here I come.&lt;/p&gt;</summary></entry><entry><title>Orx game engine</title><link href="http://www.nikhilesh.info/orx.html" rel="alternate"></link><updated>2013-12-06T00:00:00-05:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2013-12-06:orx.html</id><summary type="html">&lt;p&gt;&lt;a href="http://orx-project.org/"&gt;Orx&lt;/a&gt; is a pretty neat little 2d game engine I found
recently after embarking upon a little quest to procrastinate on schoolwork by
downloading and playing with open source game/graphics engines. Orx has a C
interface and so it forces you to write nice code.&lt;/p&gt;
&lt;p&gt;I tried to compile it on OS X 10.9 initially but ran into trouble. So then I
changed the premake4.lua files a bit and got it to work (also had to fix some
        weird glext.h typedef redefinition conflict). I put up the patch
&lt;a href="https://gist.github.com/nikki93/7822094"&gt;here&lt;/a&gt;, and here's a picture from a
demo:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.nikhilesh.info/images/orx.png" alt="fiery" style="width: 512px;"/&gt;&lt;/p&gt;</summary></entry><entry><title>Seiklus</title><link href="http://www.nikhilesh.info/seklus.html" rel="alternate"></link><updated>2013-11-29T00:00:00-05:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2013-11-29:seklus.html</id><summary type="html">&lt;p&gt;Just today I downloaded the Mac version of Game Maker to play with it (yup -
        I'm on a Mac now, might post about it later). It's been a while since
the &lt;a href="http://gmc.yoyogames.com/index.php?showtopic=140560#entry986864"&gt;last
game&lt;/a&gt; I made
in it. Also seems some people are working on &lt;a href="http://enigma-dev.org/"&gt;ENIGMA&lt;/a&gt;
- a Game-Maker-to-C++ thing that also features an open source IDE. ENIGMA is
pretty interesting actually. It's fun to throw in Game Maker games and see the
weird C++ code generated after.&lt;/p&gt;
&lt;p&gt;Anyway, then I remembered Jumper/Jumper Two and Seiklus, my favourite Game
Maker games. The Jumper series is a classic hard-mode platformer thing like
Super Meat Boy, Seiklus is more of a laid back exploration-discovery game. It's
really cool and seems to have had some influence on indie platformers. In fact,
       Matt Thorson (the creator of the Jumper series) was inspired by Seiklus
       in his ''An Untitled Story.''&lt;/p&gt;
&lt;p&gt;A picture from Seiklus:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Seiklus looks
nice" src="http://www.autofish.net/clysm/art/video_games/seiklus/images/seiklus_promo01_320.png" title="Seiklus looks nice" /&gt;&lt;/p&gt;
&lt;p&gt;Seiklus' tunes would be stuck in my head all the time while I was playing it.
Here's some:&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/1xjX84TUZZc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/e9MUtOAnfbc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Time to get Impulse Tracker running on Mac...&lt;/p&gt;</summary></entry><entry><title>First post!</title><link href="http://www.nikhilesh.info/first-post.html" rel="alternate"></link><updated>2013-11-27T00:00:00-05:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2013-11-27:first-post.html</id><summary type="html">&lt;p&gt;This is the first post on my new website! I'm using
&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>nscript revived</title><link href="http://www.nikhilesh.info/nscript-revived.html" rel="alternate"></link><updated>2010-10-12T00:00:00-04:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2010-10-12:nscript-revived.html</id><summary type="html">&lt;p&gt;(adapted from my old website)&lt;/p&gt;
&lt;p&gt;In September last year, I'd written 'nscript', a simple stack based scripting
langauge interpreter. After about two days of work, I put it &lt;a href="http://github.com/nikki93/nscript"&gt;on
GitHub&lt;/a&gt;. However, it was soon forgotten as I
got busy with school work.&lt;/p&gt;
&lt;p&gt;Recently I made a post about it on a mailing list. The post (along with
        replies) can be found
&lt;a href="http://thread.gmane.org/gmane.comp.misc.suckless/3488"&gt;here&lt;/a&gt;. Motivated by the
feedback I received, I added a lot of features to it toward the end of August.
The latest changes are available on GitHub.&lt;/p&gt;
&lt;p&gt;In nscript, constructs like 'assignments', 'control structures', or 'function
definitions' which are usually special syntactical elements in other languages
are actually high level constructs. 'Pure nscript' itself consists only of
objects (strings, blocks, numbers), variables and the stack. Even the
assignment built-in, '=' is an executable - it simply takes a symbol and a
value.&lt;/p&gt;
&lt;p&gt;For example, named functions can be created by assigning blocks of code to
variables. Even the assignment operator itself is a function that can be
replaced by your own.&lt;/p&gt;
&lt;p&gt;nscript code looks like this:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;#Add last two on stack, but keep last on stack.&lt;/span&gt;
    rot 1 at +
    &lt;span class="c"&gt;#Print sum (duplicate to keep it for next time).&lt;/span&gt;
    dup spacePrint
&lt;span class="o"&gt;}&lt;/span&gt; &amp;amp;_fib &lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;#Subtract 2 since we already print 0, 1 anyway.&lt;/span&gt;
    2 - &amp;amp;n &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="c"&gt;#Print first two terms.&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;0 1 &amp;#39;&lt;/span&gt; print
    &lt;span class="c"&gt;#Put first two terms.&lt;/span&gt;
    0 1

    &lt;span class="c"&gt;#Run _fib n times.&lt;/span&gt;
    &amp;amp;_fib n repeat
&lt;span class="o"&gt;}&lt;/span&gt; &amp;amp;fib &lt;span class="o"&gt;=&lt;/span&gt;

25 fib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code prints the first 25 elements of the Fibonacci series.&lt;/p&gt;
&lt;p&gt;In nscript, everything is an object. The code '2 3' pushes integer objects 2
and 3 onto the stack. Prepending a name with an '&amp;amp;' pushes a 'symbol' with that
name onto the stack. '=' takes a symbol and a value from the stack (in that
        order) and sets a 'variable' with the name of the symbol to that value.
The variable can then be accessed with that name. The following code thus sets
'two' to 2:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;2 &amp;amp;two &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply a name would push the value of that variable onto the stack. 'print'
takes the last object from the stack and prints it. So, the following code
would print '2':-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;two print
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But there's a catch - If the object referred to by the variable is
'executable', then it will be executed, instead of being pushed onto the stack.
This is why writing 'print' prints something - It runs an executable which is a
built-in object stored in a built-in variable called 'print'. There are more
other such built-ins, such as '+', '-', 'repeat' etc.&lt;/p&gt;
&lt;p&gt;Code within { } will push that code onto the stack as a block, which is an
executable. 'repeat' takes an executable and an integer 'n' and runs the
executable n times. So, the following code prints 'Hello!' 20 times:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello!\n&amp;quot;&lt;/span&gt; print &lt;span class="o"&gt;}&lt;/span&gt; 20 repeat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To prevent an executable variable from being executed by naming it, the name
can be prepended by '&amp;amp;'. This would create a symbol with that name. Execution
of a symbol means executing the variable with that name. So, the following code
prints 1 .. 10 in reverse order:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1 &lt;span class="o"&gt;{&lt;/span&gt; dup 1 + &lt;span class="o"&gt;}&lt;/span&gt; 9 repeat
&amp;amp;print 10 repeat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the above constructs, what are usually called 'functions' in other
languages can be created in the following way:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;{&lt;/span&gt; print &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; print &lt;span class="o"&gt;}&lt;/span&gt; &amp;amp;spacePrint &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt; spacePrint
1 2 3 &amp;amp;spacePrint 3 repeat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we create a function 'spacePrint' to print something with a space after it
by assigning a block to the 'spacePrint' variable.&lt;/p&gt;
&lt;p&gt;Structures such as 'if' or 'ifelse' which are usually keywords in other
languages are implemented simply again as executables. 'if' takes an executable
and a condition and executes the executable only if the condition is true.
'ifelse' takes two executables, and works like if, except if the condition is
false it executes the second condition. Here's an example ('getchar' pushes a
        character from standard input onto the stack):-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;getchar &lt;span class="s1"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Y!&amp;quot;&lt;/span&gt; print &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not Y!&amp;quot;&lt;/span&gt; print &lt;span class="o"&gt;}&lt;/span&gt; ifelse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Names need not really be alphanumeric. You can create your own '^' operator for
exponentiation this way:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &amp;amp;p &lt;span class="o"&gt;=&lt;/span&gt; 
    &amp;amp;n &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="c"&gt;#Put n on the stack p times, then multiply p times. We&lt;/span&gt;
    &lt;span class="c"&gt;#also put a 1 on the stack to allow for p = 0.&lt;/span&gt;
    1
    &lt;span class="o"&gt;{&lt;/span&gt; n &lt;span class="o"&gt;}&lt;/span&gt; p repeat 
    &amp;amp;* p repeat
&lt;span class="o"&gt;}&lt;/span&gt; &amp;amp;^ &lt;span class="o"&gt;=&lt;/span&gt;

3 4 ^ print &lt;span class="c"&gt;#Prints 81.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are more concepts such as 'namespaces'. Do check out the nscript code,
      it's only about 1075 lines of C. The core itself is rather small, most
      visible functionality is implemented through built-ins.&lt;/p&gt;</summary></entry><entry><title>Macrohax v2</title><link href="http://www.nikhilesh.info/macrohax-v2.html" rel="alternate"></link><updated>2009-03-22T00:00:00-04:00</updated><author><name>Nikhilesh Sigatapu</name></author><id>tag:www.nikhilesh.info,2009-03-22:macrohax-v2.html</id><summary type="html">&lt;p&gt;(adapted from my old website)&lt;/p&gt;
&lt;p&gt;I've finally implemented my most feared feature: A game save/load mechanism.&lt;/p&gt;
&lt;p&gt;This feature was something I'd always been afraid of. I would start working on
my game, and someone would say, "Your game sucks! You need save/load!", but
that would require me to redo everything I've done in a serialisable way. A
nightmare! Sure, the games had 'jump to level', but true saving and loading
would allow you to save at any point.&lt;/p&gt;
&lt;p&gt;Now, I use boost::serialisation coupled with NGF's 'forEachGameObject' and a
'GameObjectRecord' data structure to bring you... NGF::Serialiser! Here's what
it looks like:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NGF_SERIALISE_BEGIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Because NGF::GameObject doesn&amp;#39;t know anything about your position &lt;/span&gt;
    &lt;span class="c1"&gt;//and orientation, but gives it to you when you&amp;#39;re created. Some &lt;/span&gt;
    &lt;span class="c1"&gt;//GameObjects such as &amp;#39;sound&amp;#39; might not need these.&lt;/span&gt;
    &lt;span class="n"&gt;NGF_SERIALISE_POSITION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getPosition&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;NGF_SERIALISE_ROTATION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getOrientation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;NGF_SERIALISE_AUTO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mHealth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yup, that's all you need to make the Player GameObject persistent. You just
throw that into the class definition. The 'properties' (loaded from the level
        file (which might be exported from Blender)) and the GameObject's name
are saved too. Then, you can just do this:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//For saving.&lt;/span&gt;
&lt;span class="n"&gt;NGF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Serialiser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SaveFile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//For loading.&lt;/span&gt;
&lt;span class="n"&gt;mGameObjectManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;destroyAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;NGF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Serialiser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SaveFile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Beautiful, isn't it? :-)&lt;/p&gt;</summary></entry></feed>